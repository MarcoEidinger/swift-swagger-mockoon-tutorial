//
// InlineResponse200.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct InlineResponse200: Codable {

    public var city: String?
    public var cityGeonameId: Int?
    public var connection: InlineResponse200Connection?
    public var continent: String?
    public var continentCode: String?
    public var continentGeonameId: Int?
    public var country: String?
    public var countryCode: String?
    public var countryGeonameId: Int?
    public var countryIsEu: Bool?
    public var currency: InlineResponse200Currency?
    public var flag: InlineResponse200Flag?
    public var ipAddress: String?
    public var latitude: Decimal?
    public var longitude: Decimal?
    public var postalCode: String?
    public var region: String?
    public var regionGeonameId: Int?
    public var regionIsoCode: String?
    public var security: InlineResponse200Security?
    public var timezone: InlineResponse200Timezone?

    public init(city: String? = nil, cityGeonameId: Int? = nil, connection: InlineResponse200Connection? = nil, continent: String? = nil, continentCode: String? = nil, continentGeonameId: Int? = nil, country: String? = nil, countryCode: String? = nil, countryGeonameId: Int? = nil, countryIsEu: Bool? = nil, currency: InlineResponse200Currency? = nil, flag: InlineResponse200Flag? = nil, ipAddress: String? = nil, latitude: Decimal? = nil, longitude: Decimal? = nil, postalCode: String? = nil, region: String? = nil, regionGeonameId: Int? = nil, regionIsoCode: String? = nil, security: InlineResponse200Security? = nil, timezone: InlineResponse200Timezone? = nil) {
        self.city = city
        self.cityGeonameId = cityGeonameId
        self.connection = connection
        self.continent = continent
        self.continentCode = continentCode
        self.continentGeonameId = continentGeonameId
        self.country = country
        self.countryCode = countryCode
        self.countryGeonameId = countryGeonameId
        self.countryIsEu = countryIsEu
        self.currency = currency
        self.flag = flag
        self.ipAddress = ipAddress
        self.latitude = latitude
        self.longitude = longitude
        self.postalCode = postalCode
        self.region = region
        self.regionGeonameId = regionGeonameId
        self.regionIsoCode = regionIsoCode
        self.security = security
        self.timezone = timezone
    }

    public enum CodingKeys: String, CodingKey { 
        case city
        case cityGeonameId = "city_geoname_id"
        case connection
        case continent
        case continentCode = "continent_code"
        case continentGeonameId = "continent_geoname_id"
        case country
        case countryCode = "country_code"
        case countryGeonameId = "country_geoname_id"
        case countryIsEu = "country_is_eu"
        case currency
        case flag
        case ipAddress = "ip_address"
        case latitude
        case longitude
        case postalCode = "postal_code"
        case region
        case regionGeonameId = "region_geoname_id"
        case regionIsoCode = "region_iso_code"
        case security
        case timezone
    }

}
